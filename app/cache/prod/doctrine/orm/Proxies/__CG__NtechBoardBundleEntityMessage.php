<?php

namespace Proxies\__CG__\Ntech\BoardBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Message extends \Ntech\BoardBundle\Entity\Message implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getTimeAgo()
    {
        $this->__load();
        return parent::getTimeAgo();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setText($text)
    {
        $this->__load();
        return parent::setText($text);
    }

    public function getText()
    {
        $this->__load();
        return parent::getText();
    }

    public function setAddedAt($addedAt)
    {
        $this->__load();
        return parent::setAddedAt($addedAt);
    }

    public function getAddedAt()
    {
        $this->__load();
        return parent::getAddedAt();
    }

    public function addRepost(\Ntech\BoardBundle\Entity\Message $reposts)
    {
        $this->__load();
        return parent::addRepost($reposts);
    }

    public function removeRepost(\Ntech\BoardBundle\Entity\Message $reposts)
    {
        $this->__load();
        return parent::removeRepost($reposts);
    }

    public function getReposts()
    {
        $this->__load();
        return parent::getReposts();
    }

    public function addReplie(\Ntech\BoardBundle\Entity\Message $replies)
    {
        $this->__load();
        return parent::addReplie($replies);
    }

    public function removeReplie(\Ntech\BoardBundle\Entity\Message $replies)
    {
        $this->__load();
        return parent::removeReplie($replies);
    }

    public function getReplies()
    {
        $this->__load();
        return parent::getReplies();
    }

    public function setUser(\Ntech\BoardBundle\Entity\User $user = NULL)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }

    public function setOriginalMessage(\Ntech\BoardBundle\Entity\Message $originalMessage = NULL)
    {
        $this->__load();
        return parent::setOriginalMessage($originalMessage);
    }

    public function getOriginalMessage()
    {
        $this->__load();
        return parent::getOriginalMessage();
    }

    public function setReplyToMessage(\Ntech\BoardBundle\Entity\Message $replyToMessage = NULL)
    {
        $this->__load();
        return parent::setReplyToMessage($replyToMessage);
    }

    public function getReplyToMessage()
    {
        $this->__load();
        return parent::getReplyToMessage();
    }

    public function setAddedAtValue()
    {
        $this->__load();
        return parent::setAddedAtValue();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'text', 'addedAt', 'reposts', 'replies', 'user', 'originalMessage', 'replyToMessage');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}