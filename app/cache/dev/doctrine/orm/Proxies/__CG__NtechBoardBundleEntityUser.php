<?php

namespace Proxies\__CG__\Ntech\BoardBundle\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class User extends \Ntech\BoardBundle\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setAsCurrentLoggedUser()
    {
        $this->__load();
        return parent::setAsCurrentLoggedUser();
    }

    public function isCurrentLoggedUser()
    {
        $this->__load();
        return parent::isCurrentLoggedUser();
    }

    public function setAsFollowedByLoggedUser()
    {
        $this->__load();
        return parent::setAsFollowedByLoggedUser();
    }

    public function isFollowedByLoggedUser()
    {
        $this->__load();
        return parent::isFollowedByLoggedUser();
    }

    public function setNewMessagesCount($newMessagesCount)
    {
        $this->__load();
        return parent::setNewMessagesCount($newMessagesCount);
    }

    public function getNewMessagesCount()
    {
        $this->__load();
        return parent::getNewMessagesCount();
    }

    public function setRepostsCount($repostsCount)
    {
        $this->__load();
        return parent::setRepostsCount($repostsCount);
    }

    public function getRepostsCount()
    {
        $this->__load();
        return parent::getRepostsCount();
    }

    public function setRepliesCount($repliesCount)
    {
        $this->__load();
        return parent::setRepliesCount($repliesCount);
    }

    public function getRepliesCount()
    {
        $this->__load();
        return parent::getRepliesCount();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setUsername($username)
    {
        $this->__load();
        return parent::setUsername($username);
    }

    public function getUsername()
    {
        $this->__load();
        return parent::getUsername();
    }

    public function setPassword($password)
    {
        $this->__load();
        return parent::setPassword($password);
    }

    public function getPassword()
    {
        $this->__load();
        return parent::getPassword();
    }

    public function setAvatar($avatar)
    {
        $this->__load();
        return parent::setAvatar($avatar);
    }

    public function getAvatar()
    {
        $this->__load();
        return parent::getAvatar();
    }

    public function addMessage(\Ntech\BoardBundle\Entity\Message $messages)
    {
        $this->__load();
        return parent::addMessage($messages);
    }

    public function removeMessage(\Ntech\BoardBundle\Entity\Message $messages)
    {
        $this->__load();
        return parent::removeMessage($messages);
    }

    public function getMessages()
    {
        $this->__load();
        return parent::getMessages();
    }

    public function addFollowedByMe(\Ntech\BoardBundle\Entity\User $followedByMe)
    {
        $this->__load();
        return parent::addFollowedByMe($followedByMe);
    }

    public function removeFollowedByMe(\Ntech\BoardBundle\Entity\User $followedByMe)
    {
        $this->__load();
        return parent::removeFollowedByMe($followedByMe);
    }

    public function getFollowedByMe()
    {
        $this->__load();
        return parent::getFollowedByMe();
    }

    public function addMyFollower(\Ntech\BoardBundle\Entity\User $myFollowers)
    {
        $this->__load();
        return parent::addMyFollower($myFollowers);
    }

    public function removeMyFollower(\Ntech\BoardBundle\Entity\User $myFollowers)
    {
        $this->__load();
        return parent::removeMyFollower($myFollowers);
    }

    public function getMyFollowers()
    {
        $this->__load();
        return parent::getMyFollowers();
    }

    public function getRoles()
    {
        $this->__load();
        return parent::getRoles();
    }

    public function getSalt()
    {
        $this->__load();
        return parent::getSalt();
    }

    public function eraseCredentials()
    {
        $this->__load();
        return parent::eraseCredentials();
    }

    public function equals(\Symfony\Component\Security\Core\User\UserInterface $user)
    {
        $this->__load();
        return parent::equals($user);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'username', 'password', 'avatar', 'messages', 'followedByMe', 'myFollowers');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}