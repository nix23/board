<?php

namespace Ntech\BoardBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends EntityRepository
{
	public function getAllMessagesAndReposts($days = 1, $limit = 50, $offset = 0)
	{
		$query = $this->getEntityManager()->createQuery(
			'SELECT m, u, om, om_u FROM NtechBoardBundle:Message m JOIN m.user u
			 LEFT JOIN m.originalMessage om LEFT JOIN om.user om_u WHERE m.addedAt > :date
			AND m.replyToMessage is NULL ORDER BY m.addedAt DESC'
		)->setParameter('date', date('Y-m-d H:i:s', time() - (60 * 60 * 24 * $days)))
		->setMaxResults($limit)
		->setFirstResult($offset);

		return $query->getResult();
	}

	public function getMessagesAndRepostsCount($days = 1)
	{
		$query = $this->getEntityManager()->createQuery(
			'SELECT COUNT(m.id) FROM NtechBoardBundle:Message m WHERE m.addedAt > :date
			 AND m.replyToMessage is NULL'
		)->setParameter('date', date('Y-m-d H:i:s', time() - (60 * 60 * 24 * $days)));

		return $query->getSingleScalarResult();
	}

	public function getMessagesTotalCountByUserIds($userIds, $days = null)
	{
		if(!is_array($userIds) || empty($userIds))
			throw new \Exception("Wrong \$userIds passed to getAllMessagesByUserIds");

		for($i = 0; $i < count($userIds); $i++)
			$userIds[$i] = (int)$userIds[$i];

		$userIdsString = implode(", ", $userIds);

		$qb = $this->_em->createQueryBuilder()
								->select("COUNT(m.id)")
								->from("NtechBoardBundle:Message", "m")
								->join("m.user", "u")
								->where("u.id IN ($userIdsString)");

		if($days)
		{
			$qb->andWhere("m.addedAt > :date")
				->setParameter('date', date('Y-m-d H:i:s', time() - (60 * 60 * 24 * $days)));
		}

		$query = $qb->getQuery();
		return $query->getSingleScalarResult();
	}

	public function getAllMessagesByUserIds($userIds = array(),
														 $days = null,
														 $limit = null,
														 $offset = null)
	{
		if(!is_array($userIds) || empty($userIds))
			throw new \Exception("Wrong \$userIds passed to getAllMessagesByUserIds");

		for($i = 0; $i < count($userIds); $i++)
			$userIds[$i] = (int)$userIds[$i];

		$userIdsString = implode(", ", $userIds);

		$qb = $this->_em->createQueryBuilder()
								->select(array("m", "u", "om", "rm", "om_u", "rm_u"))
								->from("NtechBoardBundle:Message", "m")
								->join("m.user", "u")
								->leftJoin("m.originalMessage", "om")
								->leftJoin("om.user", "om_u")
								->leftJoin("m.replyToMessage", "rm")
								->leftJoin("rm.user", "rm_u")
								->where("u.id IN ($userIdsString)")
								->orderBy("m.addedAt", "DESC");

		if($days)
			$qb->andWhere("m.addedAt > :date")
				->setParameter('date', date('Y-m-d H:i:s', time() - (60 * 60 * 24 * $days)));

		if($limit)
			$qb->setMaxResults($limit);

		if($offset)
			$qb->setFirstResult($offset);

		$query = $qb->getQuery();
		return $query->getResult();
	}

	public function isMessageRepostedByUser($messageId, $userId)
	{
		$query = $this->getEntityManager()->createQuery(
			"SELECT COUNT(om.id) FROM NtechBoardBundle:Message m JOIN m.originalMessage om
			 JOIN m.user u WHERE u.id = :userId AND om.id = :messageId"
		)->setParameter('messageId', $messageId)->setParameter('userId', $userId);

		$count = $query->getSingleScalarResult();
		return ($count > 0) ? true : false;
	}

	public function findRepliesCountPerEveryMessage($messages = array())
	{
		if(count($messages) < 1)
			return;

		$messageIds = array();
		foreach($messages as $message)
			$messageIds[] = (int)$message->getId();

		$messageIdsString = implode(", ", $messageIds);

		$query = $this->getEntityManager()->createQuery(
			"SELECT m.id, COUNT(r.id) AS repliesCount FROM NtechBoardBundle:Message m
			 JOIN m.replies r WHERE r.replyToMessage IN ($messageIdsString) GROUP BY m.id"
		);

		$repliesCountData = $query->getResult();
		foreach($repliesCountData as $replyCountData)
		{
			$messageId = $replyCountData["id"];
			$repliesCount = $replyCountData["repliesCount"];

			foreach($messages as $message)
			{
				if($message->getId() == $messageId)
					$message->setRepliesCount($repliesCount);
			}
		}
	}

	public function getWithReplies($messageId)
	{
		$query = $this->getEntityManager()->createQuery(
			"SELECT m, r FROM NtechBoardBundle:Message m LEFT JOIN m.replies r
			 WHERE m.id = :messageId ORDER BY r.addedAt DESC"
		)->setParameter('messageId', $messageId);

		return $query->getSingleResult();
	}
}
